heat_template_version: 2013-05-23

description: >
  HOT template to deploy the test environment needed for autoenum.
  Creates a new neutron network plus a router to the public
  network, and deploys 9 servers into the new network.
  
  Quota needed: 9 instances, 14 VCPUs, 28 GB RAM, 1 FloatIP, 4 security-group.
parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
  private_subnet_name:
    type: string
  REMOTE_IP:
    type: string
    default: 0.0.0.0/0

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
#      name: { get_param: private_subnet_name }
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: Manager
      image: Kali Linux 2020.3 xfce amd64
      flavor: m1.small
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data: { get_file: lib/manager_boot.bash }
      networks:
#        - port: { get_resource: server1_port }
        - port: { get_resource: server1_public_port }

#  server1_port:
#    type: OS::Neutron::Port
#    properties:
#      network_id: { get_resource: private_net }
#      fixed_ips:
#        - subnet_id: { get_resource: private_subnet }
#      security_groups: [{ get_resource: manager_security_group }]

  server1_public_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        # Default NTNU OpenStack security group:
        - default
        - { get_resource: manager_security_group }

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_public_port }


  manager_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: manager-security-group
      description: >
        Security group rule to create
        Allows connection from remote IP (icmp, tcp22, 80, 443, 3389, 1688, 53, and udp 53)
      rules:
         #1 ingress: ICMP/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: icmp }
         #2 ingress: TCP/SSH/22/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 22, port_range_max: 22}
         #3 ingress: TCP/HTTP/80/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 80, port_range_max: 80}
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: egress, protocol: tcp, port_range_min: 80, port_range_max: 80}
         #4 ingress: TCP/HTTPS/443/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 443, port_range_max: 443}
         #5 ingress: TCP/RDP/3389/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 3389, port_range_max: 3389}
         #6 ingress: TCP/KMS/1688/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 1688, port_range_max: 1688}
         #7 ingress: TCP/DNS/53/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 53, port_range_max: 53}
         #8 ingress: UDP/DNS/53/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: udp, port_range_min: 53, port_range_max: 53}

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
