heat_template_version: 2013-05-23

description: >
  HOT template to deploy the test environment needed for autoenum.
  Creates a new neutron network plus a router to the public
  network, and deploys X servers into the new network.
parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
  private_subnet_name:
    type: string
resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
#      name: { get_param: private_subnet_name }
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: Manager
      image: Kali Linux 2020.3 xfce amd64
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server1_port }
        - port: { get_resource: server1_public_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.3
#        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: manager_security_group }]
  
  server1_public_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: manager_security_group }]

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_public_port }

  server2:
    type: OS::Nova::Server
    properties:
      name: Ubuntu20
      image: Ubuntu Server 20.04 LTS (Focal Fossa) amd64
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server2_port }

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.4
      security_groups: [{ get_resource: manager_security_group }]
  
#  server2_floating_ip:
 #   type: OS::Neutron::FloatingIP
  #  properties:
   #   floating_network: { get_param: public_net }
    #  port_id: { get_resource: server2_port }

#  server3:
#    type: OS::Nova::Server
#    properties:
#      name: WinSrv2019
#      image: Windows Server 2019 Standard [Unlicensed]
#      flavor: m1.small
#      key_name: { get_param: key_name }
#      networks:
#        - port: { get_resource: server3_port }

#  server3_port:
#    type: OS::Neutron::Port
#    properties:
#      network_id: { get_resource: private_net }
#      fixed_ips:
#        - ip_address: 192.168.1.5
#      security_groups: [{ get_resource: windows_security_group }]
  
#  server3_floating_ip:
 #   type: OS::Neutron::FloatingIP
  #  properties:
   #   floating_network: { get_param: public_net }
    #  port_id: { get_resource: server3_port }

  server4:
    type: OS::Nova::Server
    properties:
      name: Ubuntu18
      image: Ubuntu Server 18.04 LTS (Bionic Beaver) amd64
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server4_port }

  server4_port:
    type: OS::Neutron::Port
    properties: 
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.6
      security_groups: [{ get_resource: linux_security_group }]

  server5:
    type: OS::Nova::Server
    properties:
      name: Debian
      image: Debian 10 (Buster) stable amd64
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server5_port }

  server5_port:
    type: OS::Neutron::Port
    properties: 
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.7
      security_groups: [{ get_resource: linux_security_group }]

  server6:
    type: OS::Nova::Server
    properties:
      name: Cent
      image: CentOS 8.1 x86_64
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server6_port }

  server6_port:
    type: OS::Neutron::Port
    properties: 
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.8
      security_groups: [{ get_resource: linux_security_group }]

  server7:
    type: OS::Nova::Server
    properties:
      name: Win10-Workstation-1
      image: Windows 10 20H2 Pro for Workstations [Unlicensed] 
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server7_port }

  server7_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.9
      security_groups: [{ get_resource: windows_security_group }]

  server8:
    type: OS::Nova::Server
    properties:
      name: Win10-Server-2016
      image: Windows Server 2016 Standard [Unlicensed]
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server8_port }

  server8_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.10
      security_groups: [{ get_resource: windows_security_group }]

#  server9:
#   type: OS::Nova::Server
#   properties:
#     name: Win10-Workstation-2
#     image: Windows 10 20H2 Pro for Workstations [Unlicensed]
#     flavor: m1.small
#     key_name: { get_param: key_name }
#     networks:
#       - port: { get_resource: server9_port }

# server9_port:
#   type: OS::Neutron::Port
#   properties:
#     network_id: { get_resource: private_net }
#     fixed_ips:
#       - ip_address: 192.168.1.11
#     security_groups: [{ get_resource: windows_security_group }]
      
  server10:
    type: OS::Nova::Server
    properties:
      name: Kali
      image: Kali Linux 2018.2 xfce amd64
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server10_port }

  server10_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: 192.168.1.12
      security_groups: [{ get_resource: linux_security_group }]

  manager_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 1
          port_range_max: 65535

  linux_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 1
          port_range_max: 65535

  windows_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
#  server3_private_ip:
#    description: IP address of server1 in private network
#    value: { get_attr: [ server3, first_address ] }
  server4_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server4, first_address ] }
  server5_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server5, first_address ] }
  server6_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server6, first_address ] }
  server7_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server7, first_address ] }
  server8_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server8, first_address ] }
#  server9_private_ip:
#    description: IP address of server1 in private network
#    value: { get_attr: [ server9, first_address ] }
  server10_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server10, first_address ] }
